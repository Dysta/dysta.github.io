[{"content":"Présentation Bonjour à tous ! Pour ce premier post sur mon blog j\u0026rsquo;aimerais vous partager un petit bout de code que j\u0026rsquo;avais fait il y a un moment.\nCertains d\u0026rsquo;entre vous l\u0026rsquo;ont utilisé, mais pas tous. Il est également inclus dans mon CMS privé PantyCMS afin de récupérer des statistiques sur RPG.\nCe petit bout de code permet de parser une page RPG afin de récupérer les infos suivantes :\nvaleur out le nom le nombre de vote la position dans le classement le graphe RPG (voir plus bas) Code \u0026lt;?php /** * API pour RPG paradize * @author Dysta */ class RpgApi { /** * HTML code * @var string */ private $webContent; /** * RPG id * @var int */ private $id; /** * RPG position * @var int */ private $position; /** * RPG name * @var string */ private $name; /** * RPG outs * @var int */ private $outs; /** * RPG votes * @var int */ private $votes; /** * RPG urls * @var array */ private $urls; /** * RPG graph data * @var array */ private $graph; private function getWebContent() { $opts = array( CURLOPT_URL =\u0026gt; \u0026#39;http://rpg-paradize.com/site--\u0026#39; . $this-\u0026gt;id, CURLOPT_HEADER =\u0026gt; true, CURLOPT_RETURNTRANSFER =\u0026gt; true, CURLOPT_CONNECTTIMEOUT =\u0026gt; 3, CURLOPT_USERAGENT =\u0026gt; \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246\u0026#39; ); $ch = curl_init(); curl_setopt_array($ch, $opts); $this-\u0026gt;webContent = curl_exec($ch); curl_close($ch); } private function parseName() { preg_match(\u0026#39;/\u0026lt;b\u0026gt;(.*?)\u0026lt;\\/b\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $name); $this-\u0026gt;name = $name[1]; } private function parseVote() { preg_match(\u0026#39;/Vote : (.*?)\u0026lt;\\/a\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $vote); $this-\u0026gt;votes = $vote[1]; } private function parsePosition() { preg_match(\u0026#39;/Position (.*?)\u0026lt;\\/b\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $position); $this-\u0026gt;position = $position[1]; } private function parseOut() { preg_match(\u0026#39;/Clic Sortant : (.*?)\u0026lt;\\/div\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $out); $this-\u0026gt;outs = $out[1]; } private function parseUrls() { $this-\u0026gt;urls[\u0026#39;out\u0026#39;] = \u0026#34;https://www.rpg-paradize.com/out.php?num=\u0026#34; . $this-\u0026gt;id; preg_match(\u0026#39;/hidden;\\\u0026#34;\u0026gt;http(s)?:\\/\\/(.*?)\u0026lt;\\/a\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $urls); $this-\u0026gt;urls[\u0026#39;real\u0026#39;] = substr(explode(\u0026#34;\u0026gt;\u0026#34;, $urls[0])[1], 0, -3); } private function parseGraph() { preg_match(\u0026#39;/labels : \\[(.*?)\\]/\u0026#39;,$this-\u0026gt;webContent, $label); preg_match(\u0026#39;/data : \\[(.*?)\\]/\u0026#39;, $this-\u0026gt;webContent, $data); $array_label = explode(\u0026#34;,\u0026#34;, $label[1]); $array_data = explode(\u0026#34;,\u0026#34;, $data[1]); foreach($array_label as $k =\u0026gt; $v) $array_label[$k] = substr($v, 1, -1); $this-\u0026gt;graph = array(); foreach ($array_label as $k =\u0026gt; $v) { $this-\u0026gt;graph[$k][\u0026#39;date\u0026#39;] = $array_label[$k]; $this-\u0026gt;graph[$k][\u0026#39;vote\u0026#39;] = $array_data[$k]; } } /** * Init RpgApi * @param int $id id of the rpg page */ public function __construct($id) { $this-\u0026gt;id = $id; } /** * * Return RPG name * @return string name */ public function getName() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;name)) $this-\u0026gt;parseName(); return $this-\u0026gt;name; } /** * Return RPG vote * @return int vote number */ public function getVote() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;votes)) $this-\u0026gt;parseVote(); return $this-\u0026gt;votes; } /** * Return RPG position * @return int position number */ public function getPosition() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;position)) $this-\u0026gt;parsePosition(); return $this-\u0026gt;position; } /** * Return RPG out * @return int out number */ public function getOut() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;outs)) $this-\u0026gt;parseOut(); return $this-\u0026gt;outs; } /** * Return RPG url * @return array out url */ public function getUrls() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;urls)) $this-\u0026gt;parseUrls(); return $this-\u0026gt;urls; } /** * Return RPG graph data * @return array RPG graph data as array(\u0026#39;date\u0026#39;, \u0026#39;votes\u0026#39;) */ public function getGraph() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;graph)) $this-\u0026gt;parseGraph(); return $this-\u0026gt;graph; } /** * Return data as a JSON string * @return string the JSON string */ public function toJSON() { $data = $this-\u0026gt;toArray(); return json_encode($data); } /** * Return data as a Array object * @return array the array object */ public function toArray() { return array( \u0026#39;name\u0026#39; =\u0026gt; $this-\u0026gt;getName(), \u0026#39;vote\u0026#39; =\u0026gt; $this-\u0026gt;getVote(), \u0026#39;position\u0026#39; =\u0026gt; $this-\u0026gt;getPosition(), \u0026#39;out\u0026#39; =\u0026gt; $this-\u0026gt;getOut(), \u0026#39;urls\u0026#39; =\u0026gt; $this-\u0026gt;getUrls(), \u0026#39;graphe\u0026#39; =\u0026gt; $this-\u0026gt;getGraph() ); } } ?\u0026gt; Explication du code Ce code envoie une requête curl en destination de la page RPG souhaité afin de récupérer l\u0026rsquo;ensemble du code HTML brut.\nLes différentes fonctions get*() appliquent une RegEx sur le code HTML afin de récuperer la valeur correspondante au nom de la fonction.\nEgalement, 2 fonctions sont disponibles afin d\u0026rsquo;extraire l\u0026rsquo;ensemble des valeurs en une seule fois et de récupérer, au choix, un array, afin d\u0026rsquo;être utilisé directement dans le code PHP, ou un texte JSON afin de pouvoir être sérialisé et utilisé dans une autre application.\nLe graphe Comme dit plus haut, ce petit script permet de récupérer le graphe RPG. Enfin.. il ne récupère pas le graphe en lui-même sinon ça serait beaucoup trop compliqué. Non ! Il récupère simplement les données servant à construire le graphe sur RPG, à savoir, la date d\u0026rsquo;un jour et le nombre de vote correspondant à ce jour. De cette manière, vous êtes libres d\u0026rsquo;utiliser n\u0026rsquo;importe quelle bibliothèque de votre choix afin de construire le graphe comme bon vous sembles.\nEn effet, RPG Paradize utilise la bibliothèque Char.js pour générer ses graphes. Le fait de récupérer seulement les données nous permet d\u0026rsquo;utiliser une autre bibliothèque pour construire le graphe. Dans le screen ci-dessous, j\u0026rsquo;ai utilisé la bibliothèque Morris.js afin d\u0026rsquo;inclure le graphe RPG dans un panel admin..\nFig.1 \u0026ndash; PantyCMS \u0026ndash; Panel admin utilisant Morris.js pour générer le graphe Fig.2 \u0026ndash; RPG Paradize \u0026ndash; Graphe d\u0026rsquo;origine généré avec Chart.js Exemples Des exemples d\u0026rsquo;utilisation de ce petit bout de code sont disponibles sur le repos GitHub\nJ\u0026rsquo;espère que ce court article vous a plu. Dans un prochain billet, je vous montrerai comment mettre en place un système de vote par valeur en utilisant l\u0026rsquo;API !\n","permalink":"https://dysta.github.io/posts/api-rpg-paradize/","summary":"Présentation Bonjour à tous ! Pour ce premier post sur mon blog j\u0026rsquo;aimerais vous partager un petit bout de code que j\u0026rsquo;avais fait il y a un moment.\nCertains d\u0026rsquo;entre vous l\u0026rsquo;ont utilisé, mais pas tous. Il est également inclus dans mon CMS privé PantyCMS afin de récupérer des statistiques sur RPG.\nCe petit bout de code permet de parser une page RPG afin de récupérer les infos suivantes :","title":"Une API pour RPG Paradize ?"},{"content":"Expériences Professionnelles • Benebono, Paris, France Développeur Backend Go \u0026ndash; Mai 2023 → Maintenant Développement et maintenance des APIs de Benebono.\n• OVHCloud, Bordeaux, France Développeur Go/AngularJS/Perl \u0026ndash; Mai 2022 → Mars 2023 Développement et maintenance des outils internes d\u0026rsquo;OVHCloud. Prise de contact avec les clients afin d\u0026rsquo;identifier leurs besoins.\n• ThermoFisher Scientific, Bordeaux, France Stagiaire développeur Python/Cython/C++ \u0026ndash; Avril 2021 → Aout 2021 Développement d\u0026rsquo;une API en Python pour le client permettant l\u0026rsquo;intéraction direct avec la GUI du logiciel Avizo/Amira.\nScolarité • Master Informatique, Bordeaux, France Cursus génie logiciel \u0026ndash; Septembre 2019 → Aout 2021 TODO\n• Licence Informatique, Bordeaux, France Coloration informatique \u0026ndash; Septembre 2016 → Aout 2019 TODO\n• Lycée de Borda, Dax, France Bac STI2D \u0026ndash; Septembre 2013 → Aout 2016 TODO\nCompétences Programmation Langage Niveau Python3 ⚪️⚪️⚪️⚪️⚫️ HTML/CSS/JS ⚪️⚪️⚪️⚪️⚫️ Go ⚪️⚪️⚪️⚫️⚫️ Java 8 ⚪️⚪️⚪️⚫️⚫️ PHP ⚪️⚪️⚪️⚫️⚫️ C ⚪️⚪️⚪️⚫️⚫️ NodeJS ⚪️⚪️⚫️⚫️⚫️ Autres ","permalink":"https://dysta.github.io/cv/","summary":"cv","title":"Curriculum Vitae"},{"content":"","permalink":"https://dysta.github.io/discord/","summary":"discord","title":"Redirection..."}]