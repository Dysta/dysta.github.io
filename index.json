[{"content":"Mon aventure en stage de fin d\u0026rsquo;étude : quand la facilité n\u0026rsquo;est pas toujours le meilleur choix Note : Ce billet de blog relate une expérience personnelle basée sur un stage qui s\u0026rsquo;est déroulé il y a quelques années de ça.\nLorsqu\u0026rsquo;on effectue un stage de fin d\u0026rsquo;étude, on espère généralement vivre une expérience enrichissante qui nous permettra de mettre en pratique les connaissances acquises au fil des années passées à l\u0026rsquo;université. Malheureusement, ce ne fut pas tout à fait mon cas. Mon stage de fin d\u0026rsquo;étude en informatique a été une aventure tumultueuse, marquée par la monotonie, la frustration, et des rencontres peu agréables.\nLe choix de la facilité Au moment de chercher un stage, j\u0026rsquo;ai opté pour la facilité. J\u0026rsquo;ai choisi un langage de programmation que je maîtrisais déjà : Python. Mon raisonnement était simple : travailler avec un langage que je connaissais bien me permettrait de me concentrer d\u0026rsquo;avantage sur les aspects techniques du projet et approfondir ma connaissance du langage entouré de professionnels. De plus, travailler avec un langage que je connaissais déjà avait ce côté rassurant : n\u0026rsquo;ayant jamais eu la chance de faire d\u0026rsquo;autres expériences en entreprise, je voulais absolument pas me rater et prouver que l\u0026rsquo;équipe m\u0026rsquo;avait choisi pour les bonnes raisons. Après diverse recherches, je tombe sur le stage parfait : ThermoFisher Scientific qui cherche un stagiaire afin d\u0026rsquo;agrémenter son logiciel de fonctionnalités Python.\nUn boulot peu enthousiasmant Les premières semaines de mon stage étaient très chouette, je découvrais un nouveau monde, je mettais enfin en pratique les connaissances que j\u0026rsquo;avais acquises et surtout, je m\u0026rsquo;épanouissais. L\u0026rsquo;équipe était très accueillante et bienveillante avec moi. Cependant, après quelques semaines, j\u0026rsquo;ai compris que le choix de la facilité avait ses inconvénients. Le travail qui m\u0026rsquo;était confié était monotone et peu stimulant et surtout, ne me permettais pas d’approfondir les connaissances en Python. En effet, je me retrouvais à effectuer des tâches d\u0026rsquo;un niveau assez basiques, loin de l\u0026rsquo;enthousiasme que j\u0026rsquo;espérais ressentir en mettant en application mes compétences en informatique. J\u0026rsquo;ai compris à ce moment la que le stage ne me permettait pas de relever des défis techniques intéressants.\nL\u0026rsquo;encadrement À mesure que le stage avançait, la relation avec ma tutrice se détériorait. Elle devenait de plus en plus exigeante sur un projet qui était parfois mal définis. Je passais donc mon temps à faire et défaire du code ce qui rend l\u0026rsquo;avancement très lent et donc frustrant. De plus, je n\u0026rsquo;avais pas vraiment le temps de réfléchir à la structure de mon mémoire que je devais rendre avant la fin de mon stage.\nLe climat au sein de l\u0026rsquo;équipe se tendait, et les relations professionnelles devenaient de plus en plus compliquées. Le stage, qui aurait dû être une opportunité d\u0026rsquo;apprentissage, s\u0026rsquo;est transformé en une expérience stressante et frustrante. Rajoutons à cela que j\u0026rsquo;étais encore en télétravail, seul dans mon appartement. Moi qui pensait que le stage en entreprise allait être l\u0026rsquo;occasion de voir autre chose, car ma dernière année de master s\u0026rsquo;est déroulée à distance, et qui avait besoin de m\u0026rsquo;aérer l\u0026rsquo;esprit. Quel ne fût pas ma déception quand j\u0026rsquo;ai appris que le déroulement de mon stage allait être sensiblement la même routine que lors de mes études.\nLa leçon Malgré toutes les difficultés rencontrées, j\u0026rsquo;ai tiré une précieuse leçon de cette aventure : un stage de fin d\u0026rsquo;étude mais, de manière général, un boulot, ne doit pas être choisi par facilité, mais plutôt par intérêt et opportunité d\u0026rsquo;apprentissage. Il est essentiel de rechercher des expériences qui nous permettent de découvrir de nouvelles compétences, d\u0026rsquo;explorer de nouveaux domaines et de grandir en tant que professionnel.\nJ\u0026rsquo;ai appris que la valeur d\u0026rsquo;un stage ne réside pas seulement dans le fait de compléter un diplôme, mais aussi dans la possibilité de s\u0026rsquo;épanouir en tant que futur expert de son domaine. La facilité peut sembler tentante et rassurante à ce stage de notre vie professionnelle, mais elle ne garantit pas une expérience épanouissante et enrichissante.\nEn fin de compte, cette aventure m\u0026rsquo;a rappelé l\u0026rsquo;importance de choisir des opportunités professionnelles qui nous permettent de grandir, d\u0026rsquo;apprendre et de se développer. Une mauvaise expérience peut être une leçon précieuse pour l\u0026rsquo;avenir, mais elle ne doit pas être une norme à suivre ou un frein pour l\u0026rsquo;avenir.\nMon conseil : choisissez des stages qui vous défient, vous inspirent et vous aident à grandir. Ne tombez pas dans le piège de la facilité comme moi. C\u0026rsquo;est souvent dans les défis que l\u0026rsquo;on trouve les opportunités les plus enrichissantes. N\u0026rsquo;ayez pas peur de choisir des stages avec des langages de programmation que vous n\u0026rsquo;avez jamais eu l\u0026rsquo;occasion d\u0026rsquo;expérimenter.\n","permalink":"https://dysta.github.io/posts/premiere-exp-pro/","summary":"Mon aventure en stage de fin d\u0026rsquo;étude : quand la facilité n\u0026rsquo;est pas toujours le meilleur choix Note : Ce billet de blog relate une expérience personnelle basée sur un stage qui s\u0026rsquo;est déroulé il y a quelques années de ça.\nLorsqu\u0026rsquo;on effectue un stage de fin d\u0026rsquo;étude, on espère généralement vivre une expérience enrichissante qui nous permettra de mettre en pratique les connaissances acquises au fil des années passées à l\u0026rsquo;université.","title":"Ma première expérience professionnel"},{"content":"Mise en contexte Bonjour à tous ! Pour ce premier post sur mon blog j\u0026rsquo;aimerais vous partager un petit bout de code que j\u0026rsquo;avais fait il y a un moment.\nCertains d\u0026rsquo;entre vous l\u0026rsquo;ont utilisé, mais pas tous. Il est également inclus dans mon CMS privé PantyCMS afin de récupérer des statistiques sur RPG.\nCe petit bout de code permet de parser une page RPG afin de récupérer les infos suivantes :\nvaleur out le nom le nombre de vote la position dans le classement le graphe RPG (voir plus bas) J\u0026rsquo;ai réalisé ce petit bout de code lorsque je codais la partie admin de mon CMS Dofus. J\u0026rsquo;ai réalisé qu\u0026rsquo;avoir un récapitulatif automatique et précis de RPG Paradize directement dans le panel admin donnait une réelle plus value.\nCode Lorsque j\u0026rsquo;ai réalisé le code, je l\u0026rsquo;ai fais en PHP pour rester sur la même stack technique que le CMS et donc, faciliter son intégration. Cependant, il est facilement convertissable dans un autre langage comme Python ou Javascript (merci ChatGPT).\nJ\u0026rsquo;ai conscience que le code n\u0026rsquo;est pas des plus PHPiste qui existe étant donné mon niveau relativement basique dans le langage. Le code est donc prompt a diverses optimisation.\nInitialisation 1 2 3 4 5 6 7 \u0026lt;?php class RpgApi { public function __construct($id) { $this-\u0026gt;id = $id; } } ?\u0026gt; On commence par créer notre object RpgApi en lui fournissant simplement l\u0026rsquo;id de notre page. Pour rappel, l\u0026rsquo;id de la page se trouve à la fin de l\u0026rsquo;url. Par exemple, l\u0026rsquo;url https://www.rpg-paradize.com/site-Fun-Zandix+2.10-101961, l\u0026rsquo;id sera 101961. Notez également que tout ce qui se situe entre le site- et -101961 est inutile et peu être enlevé. Ainsi, l\u0026rsquo;url https://www.rpg-paradize.com/site\u0026ndash;101961 est valide !\nNous pouvons donc initialiser notre api de cette façon :\n1 $RPG = new RpgApi(101961); Récupérer le nombre de vote Lorsque notre objet RpgApi est initialisé, il nous permet de récupérer de manière très simple le nombre de vote grace à la fonction publique getVote().\n1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Return RPG vote * @return int vote number */ public function getVote() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;votes)) $this-\u0026gt;parseVote(); return $this-\u0026gt;votes; } Cette méthode est en plusieurs temps. Elle va d\u0026rsquo;abord récupérer le HTML de la page grâce à la fonction privé getWebContent() pour ensuite parser le nombre de vote via la fonction parseVote(). La méthode qui permet de parser le nombre de vote n\u0026rsquo;est pas très compliqué. Elle repose sur une simple regEx qu\u0026rsquo;on applique sur le HTML récupéré.\n1 2 3 4 private function parseVote() { preg_match(\u0026#39;/Vote : (.*?)\u0026lt;\\/a\u0026gt;/\u0026#39;, $this-\u0026gt;webContent, $vote); $this-\u0026gt;votes = $vote[1]; } Le principe est similaire pour les autres méthodes à l\u0026rsquo;exception de parseGraph().\nNous pouvons donc ajouter à notre petit bout de code d\u0026rsquo;exemple le nombre de vote !\n1 2 3 4 $RPG = new RpgApi(101961); $vote = $RPG-\u0026gt;getVote(); echo \u0026#34;\u0026lt;p\u0026gt; Vote : \u0026#34; . vote . \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; Ici le nombre de vote est affiché dans une balise paragraphe. Pour récupérer d\u0026rsquo;autres info comme l\u0026rsquo;url ou le nombre de out, le principe est le même.\nRécuperation du code HTML Comme dit précédemment, le code HTML est récupéré via la fonction getWebContent(). Cette fonction est appelée en interne et utilise le module PHP curl.\n1 2 3 4 5 6 7 8 9 10 11 12 13 private function getWebContent() { $opts = array( CURLOPT_URL =\u0026gt; \u0026#39;http://rpg-paradize.com/site--\u0026#39; . $this-\u0026gt;id, CURLOPT_HEADER =\u0026gt; true, CURLOPT_RETURNTRANSFER =\u0026gt; true, CURLOPT_CONNECTTIMEOUT =\u0026gt; 3, CURLOPT_USERAGENT =\u0026gt; \u0026#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246\u0026#39; ); $ch = curl_init(); curl_setopt_array($ch, $opts); $this-\u0026gt;webContent = curl_exec($ch); curl_close($ch); } Je commence par initialiser un tableau avec tous mes paramètres CURL. Le nom des paramètres est défini par le module curl lui même. On peut voir que j\u0026rsquo;ai utilisé la méthode de supprimer l\u0026rsquo;intérieur de l\u0026rsquo;url afin d\u0026rsquo;être certain de tomber sur la bonne page. On continue en définissant un header et des user-agents afin que notre requête soit le moins suspecte possible. Puis on initialise notre objet curl en lui donnant les paramètres et en envoyant la requête.\nNotez que dans chaque fonction get*(), un if est effectué sur le contenu du HTML afin de ne le récupérer qu\u0026rsquo;une seule fois et non à chaque fois que nous voulons récupérer une info comme ici sur getName() qui possède une structure similaire à getVote().\n1 2 3 4 5 6 7 8 9 10 11 12 13 /** * * Return RPG name * @return string name */ public function getName() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;name)) $this-\u0026gt;parseName(); return $this-\u0026gt;name; } Si vous voulez donc rafraîchir les données contenu dans votre objet rpg, vous devez le recréer. Notez qu\u0026rsquo;une fonction permettant de rafraîchir le contenu n\u0026rsquo;est pas réellement nécessaire vu que le site met à jour les données que toutes les 3 heures environs. Cependant, cela reste possible de cette manière :\n1 2 3 4 5 6 7 8 9 10 11 $RPG = new RpgApi(101961); $vote = $RPG-\u0026gt;getVote(); echo \u0026#34;\u0026lt;p\u0026gt; Vote : \u0026#34; . vote . \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; // many treatment... // we want to refresh data $RPG = new RpgApi(101961); $vote = $RPG-\u0026gt;getVote(); echo \u0026#34;\u0026lt;p\u0026gt; Vote : \u0026#34; . vote . \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;; // will be an another number Graphe Comme dit plus haut, ce petit script permet de récupérer le graphe RPG. Enfin.. il ne récupère pas le graphe en lui-même sinon ça serait beaucoup trop compliqué et très peu modulable. Il récupère simplement les données servant à construire le graphe sur RPG, à savoir, la date d\u0026rsquo;un jour et le nombre de vote correspondant à ce jour. De cette manière, vous êtes libres d\u0026rsquo;utiliser n\u0026rsquo;importe quelle bibliothèque de votre choix afin de construire le graphe comme bon vous sembles.\nEn effet, RPG Paradize utilise la bibliothèque Char.js pour générer ses graphes. Le fait de récupérer seulement les données nous permet d\u0026rsquo;utiliser une autre bibliothèque pour construire le graphe. Dans le screen ci-dessous, j\u0026rsquo;ai utilisé la bibliothèque Morris.js afin d\u0026rsquo;inclure le graphe RPG dans un panel admin..\nFig.1 \u0026ndash; PantyCMS \u0026ndash; Panel admin utilisant Morris.js pour générer le graphe Fig.2 \u0026ndash; RPG Paradize \u0026ndash; Graphe d\u0026rsquo;origine généré avec Chart.js Récupération des infos La récupération des infos du graphe se fait dans la fonction parseGraph(). Cette fonction construit un tableau de la forme suivante :\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ \u0026#34;key_id\u0026#34; = { \u0026#34;date\u0026#34;: \u0026#34;YYYY-MM-DD\u0026#34;, \u0026#34;vote\u0026#34;: 5 }, \u0026#34;key_id\u0026#34; = { \u0026#34;date\u0026#34;: \u0026#34;YYYY-MM-DD\u0026#34;, \u0026#34;vote\u0026#34;: 9 }, \u0026#34;key_id\u0026#34; = { \u0026#34;date\u0026#34;: \u0026#34;YYYY-MM-DD\u0026#34;, \u0026#34;vote\u0026#34;: 13 }, // ... ] Dans un premier temps, je fais comme les autres méthodes. j\u0026rsquo;applique une regEx sur le contenu HTML afin d\u0026rsquo;extraire une énorme string contenant les labels (les dates) et la data (les votes) puis je crée un tableau en séparant la string via les virgules entre chaque donnée.\n1 2 3 4 preg_match(\u0026#39;/labels : \\[(.*?)\\]/\u0026#39;,$this-\u0026gt;webContent, $label); preg_match(\u0026#39;/data : \\[(.*?)\\]/\u0026#39;, $this-\u0026gt;webContent, $data); $array_label = explode(\u0026#34;,\u0026#34;, $label[1]); $array_data = explode(\u0026#34;,\u0026#34;, $data[1]); Dans le tableau des dates, chaque date est entouré de double quote. Il faut les enlever.\n1 2 foreach($array_label as $k =\u0026gt; $v) $array_label[$k] = substr($v, 1, -1); Je peux ensuite crée le tableau final qui contient la donnée des labels nettoyé en lui associant le bon nombre de vote\n1 2 3 4 5 $this-\u0026gt;graph = array(); foreach ($array_label as $k =\u0026gt; $v) { $this-\u0026gt;graph[$k][\u0026#39;date\u0026#39;] = $array_label[$k]; $this-\u0026gt;graph[$k][\u0026#39;vote\u0026#39;] = $array_data[$k]; } C\u0026rsquo;est ce tableau qui sera retourné à l\u0026rsquo;utilisateur lorsqu\u0026rsquo;il appellera la fonction getGraph().\n1 2 3 4 5 6 7 8 9 10 11 12 13 /** * Return RPG graph data * @return array RPG graph data as array(\u0026#39;date\u0026#39;, \u0026#39;votes\u0026#39;) */ public function getGraph() { if (empty($this-\u0026gt;webContent)) $this-\u0026gt;getWebContent(); if (empty($this-\u0026gt;graph)) $this-\u0026gt;parseGraph(); return $this-\u0026gt;graph; } Exemples Les nombreux bout de code présent dans ce billet sont tirés du dossier exemple du repos GitHub disponible ici\nMerci de votre lecture et à une prochaine ! 👋\n","permalink":"https://dysta.github.io/posts/api-rpg-paradize/","summary":"Mise en contexte Bonjour à tous ! Pour ce premier post sur mon blog j\u0026rsquo;aimerais vous partager un petit bout de code que j\u0026rsquo;avais fait il y a un moment.\nCertains d\u0026rsquo;entre vous l\u0026rsquo;ont utilisé, mais pas tous. Il est également inclus dans mon CMS privé PantyCMS afin de récupérer des statistiques sur RPG.\nCe petit bout de code permet de parser une page RPG afin de récupérer les infos suivantes :","title":"Une API pour RPG Paradize ?"},{"content":"Expériences Professionnelles • Benebono, Paris, France Développeur Backend Go \u0026ndash; Mai 2023 → Maintenant Développement et maintenance des APIs de Benebono.\n• OVHCloud, Bordeaux, France Développeur Go/AngularJS/Perl \u0026ndash; Mai 2022 → Mars 2023 Développement et maintenance des outils internes d\u0026rsquo;OVHCloud. Prise de contact avec les clients afin d\u0026rsquo;identifier leurs besoins.\n• ThermoFisher Scientific, Bordeaux, France Stagiaire développeur Python/Cython/C++ \u0026ndash; Avril 2021 → Aout 2021 Développement d\u0026rsquo;une API en Python pour le client permettant l\u0026rsquo;intéraction direct avec la GUI du logiciel Avizo/Amira.\nScolarité • Master Informatique, Bordeaux, France Cursus génie logiciel \u0026ndash; Septembre 2019 → Aout 2021 TODO\n• Licence Informatique, Bordeaux, France Coloration informatique \u0026ndash; Septembre 2016 → Aout 2019 TODO\n• Lycée de Borda, Dax, France Bac STI2D \u0026ndash; Septembre 2013 → Aout 2016 TODO\nCompétences Programmation Langage Niveau Python3 ⚪️⚪️⚪️⚪️⚫️ HTML/CSS/JS ⚪️⚪️⚪️⚪️⚫️ Go ⚪️⚪️⚪️⚫️⚫️ Java 8 ⚪️⚪️⚪️⚫️⚫️ PHP ⚪️⚪️⚪️⚫️⚫️ C ⚪️⚪️⚪️⚫️⚫️ NodeJS ⚪️⚪️⚫️⚫️⚫️ Autres ","permalink":"https://dysta.github.io/cv/","summary":"cv","title":"Curriculum Vitae"},{"content":"","permalink":"https://dysta.github.io/discord/","summary":"discord","title":"Redirection..."}]